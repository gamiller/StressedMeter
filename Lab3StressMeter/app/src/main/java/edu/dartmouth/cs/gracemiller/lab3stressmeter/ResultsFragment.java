package edu.dartmouth.cs.gracemiller.lab3stressmeter;

import android.graphics.Color;
import android.os.Bundle;
import android.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;


// Creates chart and table
public class ResultsFragment extends Fragment {

    List<tableData> mTableList = new ArrayList<tableData>();

    Map<Integer,Integer> mstressMap = new HashMap<Integer,Integer>();
    TableLayout mStressTable;

    public static ResultsFragment newInstance() {
        ResultsFragment fragment = new ResultsFragment();
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

            // Stops the media and vibrator alarm
            AlarmClass.vibrator.cancel();
            AlarmClass.mediaPlayer.stop();

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View v = inflater.inflate(R.layout.fragment_results, container, false);

        //load data from file into list
        LoadData();

        // extract table from view
        mStressTable = (TableLayout) v.findViewById(R.id.table_id);

        //create the graph
        createGraph(v);

        //create the table
        populateTable();


        return v;

    }

    // creates the graph using hello charts library
    private void createGraph(View v) {

        //retreive chart view
        LineChartView chart = (LineChartView) v.findViewById(R.id.chart_id);

        // create arraylist for points on the line
        List<PointValue> lineValues = new ArrayList<PointValue>();

        // iterate through list and place them in the line array
        for(int i = 0; i<mTableList.size(); i++) {
            lineValues.add(new PointValue(i, mTableList.get(i).getStress()));
        }

        // create the trendline and add to array of lines
        Line trendLine = new Line(lineValues).setFilled(true).setColor(Color.BLUE).setCubic(true);
        List<Line> lineList = new ArrayList<Line>();
        lineList.add(trendLine);

        // set axes
        Axis xaxis = new Axis();
        xaxis.setName("Instances").setAutoGenerated(true);
        Axis yaxis = new Axis();
        yaxis.setName("Stress Level").setAutoGenerated(true);

        // compile data and add to chart
        LineChartData chartData = new LineChartData();
        chartData.setLines(lineList);
        chartData.setAxisXBottom(xaxis);
        chartData.setAxisYLeft(yaxis);
        chart.setLineChartData(chartData);

    }

    // loads the data from the file into list
    private void LoadData() {

        // get file path
        File mReadFile = new File(getActivity().getFilesDir(),getString(R.string.photo_path));

        if (mReadFile.exists()) {
            BufferedReader buffRead = null;

            try {
                // loop variables
                buffRead = new BufferedReader(new FileReader(mReadFile));
                int mCurInt = 0;
                int flag = 1;
                int mTimeKey = 0;
                int mStressValue = 0;

                // while not end of file
                while ((mCurInt = buffRead.read()) != -1) {

                    // check if comma
                    if (mCurInt == 44) {
                        flag = 0;
                    } else if (mCurInt == 47) {     // check if forward slash
                        flag = 1;
                    } else {
                        if (flag == 1) {            // if it is a time slot
                            //assign time
                            mTimeKey = mCurInt;
                        } else {                    // if it is a stress slot
                            //assign stress score
                            mStressValue = mCurInt;

                            //add values to list of entries
                            tableData entry = new tableData(0,0);
                            entry.setTime(mTimeKey);
                            entry.setStress(mStressValue);
                            mTableList.add(entry);
                        }
                    }
                }
                buffRead.close();
            } catch (IOException e) {
                e.printStackTrace();
            }

        }


    }

    //places all the data in a table
    private void populateTable() {

        // create the header row
        TableRow tr_head = new TableRow(getActivity());
        tr_head.setId(0);
        tr_head.setBackgroundColor(Color.GRAY);

        // create text view columns
        TextView timeHeader = new TextView(getActivity());
        TextView stressHeader = new TextView(getActivity());

        // set titles of columns
        timeHeader.setText("Time");
        stressHeader.setText("Stress");

        // add columns to header row
        tr_head.addView(timeHeader);
        tr_head.addView(stressHeader);

        // add row to table
        mStressTable.addView(tr_head,0);

        // iterate through the table array list and create rows
        for (int i = 0; i < mTableList.size(); i++) {

            //set up row
            TableRow row = new TableRow(getActivity());
            row.setId(100 + i);

            // set up text views for columns
            TextView timeText = new TextView(getActivity());
            timeText.setId(200 + i);
            TextView stressText = new TextView(getActivity());
            timeText.setId(300 + i);

            // enter values for textviews
            timeText.setText("" + mTableList.get(i).getTime());
            stressText.setText("" + mTableList.get(i).getStress());


            Log.d("here", "" + mTableList.get(i).getTime() + " " + mTableList.get(i).getStress());
            Log.d("i", "i = " + i);

            // add columns to row and row to table
            row.addView(timeText);
            row.addView(stressText);
            mStressTable.addView(row,i+1);

        }

    }

    // class for object in the list to hold both stress and time ints
    public class tableData {

        int mTime;
        int mStress;

        public tableData(int time, int stress){
        }

        public void setTime(int time) {
            mTime = time;
        }

        public void setStress(int stress) {
            mStress = stress;
        }

        public int getTime() {
            return mTime;
        }

        public int getStress() {
            return mStress;
        }

    }

}
